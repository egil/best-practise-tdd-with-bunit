@* DataTableTest.razorÂ *@
@inherits TestContext
@code 
{
    [Fact]
    public void DataTable_Renders_Basic_Table_With_Head_And_Body()
    {
        // NOTE: Preview feature.
        ComponentFactories.UseDummyFor<DataTableHeader<object>>();

        // Render the <DataTable> component, TValue is unimportant for this test, so pick
        var cut = Render(@<DataTable TItem="object" />);

        // Assert table with head and body
        cut.MarkupMatches(
            @<table>
                <thead></thead>
                <tbody></tbody>
            </table>);
    }

    [Fact]
    public void DataTable_Uses_DataTableHeader_To_Render_Table_Head()
    {
        // Render the <DataTable> component, TValue is unimportant for this test, so pick
        var cut = Render(@<DataTable TItem="object" />);

        // Find the <DataTableHeader> component in the render tree
        // and assert that its content matches first row in thead.
        var dataTableHeader = cut.FindComponent<DataTableHeader<object>>();
        cut.Find("thead")
            .ChildNodes
            .MarkupMatches(dataTableHeader);
    }

    [Theory, AutoData]
    public void DataTable_Uses_DataTableRow_To_Render_Table_Row(
        IEnumerable<WeatherForecast> items)
    {
        // Render the <DataTable> component, passing it the weather forecasts
        var cut = Render(@<DataTable Items="items" />);

        // Find all DataTableRow components in the render tree
        // and assert they were passed the correct item
        var dataTableRows = cut.FindComponents<DataTableRow<WeatherForecast>>();
        dataTableRows.Select(x => x.Instance.Item)
            .Should()
            .BeEquivalentTo(items);
    }
}